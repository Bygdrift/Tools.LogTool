<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogTool</name>
    </assembly>
    <members>
        <member name="T:Bygdrift.Tools.LogTool.Log">
            <summary>
            Handle all logs. With this log, you can read the log - you cannot do that in a nomral ILogger
            </summary>
            <summary>
            Handle all logs. With this log, you can read the log - you cannot do that in a nomral ILogger
            </summary>
            <summary>
            Handle all logs. With this log, you can read the log - you cannot do that in a nomral ILogger
            </summary>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            The constructor
            </summary>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Log.Logs">
            <summary>
            The saved logs
            </summary>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Log.Logger">
            <summary>
            The formal logger
            </summary>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.GetErrorsAndCriticals(System.String,Bygdrift.Tools.LogTool.Models.CallerPath)">
            <summary>
            Return all errors and critical logs
            </summary>
            <param name="callerPath">Only returns logs that conatains a path from the callerpath. Ignored if None</param>
            <param name="includeCallerPath"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.GetLogs(System.String,Bygdrift.Tools.LogTool.Models.CallerPath)">
            <summary>
            Get all logs
            </summary>
            <param name="callerPath">Only returns logs that conatains a path from the callerpath. Ignored if None</param>
            <param name="includeCallerPath">writes in from what class the log has been send</param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.GetLogs(Bygdrift.Tools.LogTool.Models.CallerPath,Bygdrift.Tools.LogTool.Models.CallerPath)">
            <summary>
            Get all logs
            </summary>
            <param name="fromCurrentCallerPath">Only returns logs that comes from the calling path. Ignored if None</param>
            <param name="includeCallerPath">writes in from what class the log has been send</param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.GetLogs(Bygdrift.Tools.LogTool.Models.LogType,System.String,Bygdrift.Tools.LogTool.Models.CallerPath)">
            <summary>
            Get all logs
            </summary>
            <param name="logType">What kind of log to return</param>
            <param name="callerPath">Only returns logs that conatains a path from the callerpath. Ignored if None</param>
            <param name="includeCallerPath">writes in from what class the log has been send</param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.GetLogs(Bygdrift.Tools.LogTool.Models.LogType,Bygdrift.Tools.LogTool.Models.CallerPath,Bygdrift.Tools.LogTool.Models.CallerPath)">
            <summary>
            Get all logs
            </summary>
            <param name="logType">What kind of log to return</param>
            <param name="fromCurrentCallerPath">Only returns logs that comes from the calling path. Ignored if None</param>
            <param name="includeCallerPath">writes in from what class the log has been send</param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.HasErrorsOrCriticals(System.String)">
            <summary>
            If there are any errors in the log
            </summary>
            <param name="callerPath">Only returns logs that conatains a path from the callerpath. Ignored if null or empty</param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.HasErrorsOrCriticals(Bygdrift.Tools.LogTool.Models.CallerPath)">
            <summary>
            If there are any errors in the log
            </summary>
            <param name="fromCurrentCallerPath">Only returns logs that comes from the calling path. Ignored if None</param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.Add(Bygdrift.Tools.LogTool.Models.LogType,System.Diagnostics.StackFrame,System.Exception,System.String,System.Object[])">
            <summary>
            Create a log
            </summary>
            <param name="logType"></param>
            <param name="stack"></param>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.Add(Bygdrift.Tools.LogTool.Models.LogType,System.String)">
            <summary>
            Create a log
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.Add(Bygdrift.Tools.LogTool.Models.LogType,System.String,System.Object[])">
            <summary>
            Create a log
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.LogInformation(System.String,System.Object[])">
            <summary>
            Create a log information
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.LogInformation(System.Exception,System.String,System.Object[])">
            <summary>
            Create a log information
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.LogWarning(System.String,System.Object[])">
            <summary>
            Create a log warning
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.LogWarning(System.Exception,System.String,System.Object[])">
            <summary>
            Create a log warning
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.LogError(System.String,System.Object[])">
            <summary>
            Create a log error
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Create a log error
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.LogCritical(System.String,System.Object[])">
            <summary>
            Create a log critical. This also throws an error
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Log.LogCritical(System.Exception,System.String,System.Object[])">
            <summary>
            Create a log critical
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.Caller.NamespaceName">
            <summary>The name of the namespace that called this method</summary>
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.Caller.ClassName">
            <summary>The name of the class that called this method</summary>
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.Caller.MethodName">
            <summary>The name of the method that called this method</summary>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Models.Caller.#ctor(System.Diagnostics.StackFrame)">
            <summary>
            
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Models.Caller.NamespaceClassName">
            <summary>Namespace.Class</summary>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Models.Caller.NamespaceClassMethodName">
            <summary>Namespace.Class.Method</summary>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Models.Caller.GetCallerPath(Bygdrift.Tools.LogTool.Models.CallerPath)">
            <summary>
            The message in the log
            </summary>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Models.Caller.FullCallerPath">
            <summary>Get the full path to the calling method like: Namespace.Class.Method</summary>
        </member>
        <member name="T:Bygdrift.Tools.LogTool.Models.CallerPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.CallerPath.None">
            The message doe not contain the path to the method that called the lod
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.CallerPath.NamespaceName">
            The message in the log, starting with the Namespace that send the log
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.CallerPath.NamespaceClassName">
            The message in the log, starting with Namespace.Classname that send the log
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.CallerPath.NamespaceClassMethodName">
            The message in the log, starting with Namepsace.Classname.MethodName that send the log
        </member>
        <member name="T:Bygdrift.Tools.LogTool.Models.LogModel">
            <summary>
            Handles where calls comes from like Namspace.Class.Method
            </summary>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Models.LogModel.#ctor(Bygdrift.Tools.LogTool.Models.LogType,System.Diagnostics.StackFrame,System.String,System.Exception,System.Object[])">
            <summary>
            The model - primary used internal
            </summary>
            <param name="logType"></param>
            <param name="stack"></param>
            <param name="messageTemplate"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Models.LogModel.Caller">
            <summary>
            Handles where calls comes from like Namspace.Class.Method
            </summary>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Models.LogModel.Arguments">
            <summary>
            Eventual arugments that followed the log
            </summary>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Models.LogModel.Exception">
            <summary>
            Eventual exceptions
            </summary>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Models.LogModel.MessageTemplate">
            <summary>
            The template that builds up the log. An log with this template: log.LogError("-{A}- {B}-", "a", 1), will produce "-a- 1-";
            </summary>
        </member>
        <member name="P:Bygdrift.Tools.LogTool.Models.LogModel.LogType">
            <summary>
            The type of log - is it an information or error etc.
            </summary>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Models.LogModel.ContainsCallerPath(System.String)">
            <summary>
            
            </summary>
            <param name="callerPath">If null or empty, then true.</param>
        </member>
        <member name="M:Bygdrift.Tools.LogTool.Models.LogModel.Message(Bygdrift.Tools.LogTool.Models.CallerPath)">
            <summary>
            The message in the log
            </summary>
        </member>
        <member name="T:Bygdrift.Tools.LogTool.Models.LogType">
            <summary>
            The type og log
            </summary>
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.LogType.Information">
            <summary>Information</summary>
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.LogType.Warning">
            <summary>Warning</summary>
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.LogType.Error">
            <summary>Error</summary>
        </member>
        <member name="F:Bygdrift.Tools.LogTool.Models.LogType.Critical">
            <summary>Critical</summary>
        </member>
    </members>
</doc>
